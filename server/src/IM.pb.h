// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_IM_2eproto();
namespace IM {
class AddFriend;
class AddFriendDefaultTypeInternal;
extern AddFriendDefaultTypeInternal _AddFriend_default_instance_;
class FriendInfo;
class FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class FriendList;
class FriendListDefaultTypeInternal;
extern FriendListDefaultTypeInternal _FriendList_default_instance_;
class GetFriendInfo;
class GetFriendInfoDefaultTypeInternal;
extern GetFriendInfoDefaultTypeInternal _GetFriendInfo_default_instance_;
class GroupChat;
class GroupChatDefaultTypeInternal;
extern GroupChatDefaultTypeInternal _GroupChat_default_instance_;
class HongbaoResp;
class HongbaoRespDefaultTypeInternal;
extern HongbaoRespDefaultTypeInternal _HongbaoResp_default_instance_;
class Hongbaoreq;
class HongbaoreqDefaultTypeInternal;
extern HongbaoreqDefaultTypeInternal _Hongbaoreq_default_instance_;
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class Register;
class RegisterDefaultTypeInternal;
extern RegisterDefaultTypeInternal _Register_default_instance_;
class ReqRobHongbao;
class ReqRobHongbaoDefaultTypeInternal;
extern ReqRobHongbaoDefaultTypeInternal _ReqRobHongbao_default_instance_;
class RespRobHongbao;
class RespRobHongbaoDefaultTypeInternal;
extern RespRobHongbaoDefaultTypeInternal _RespRobHongbao_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class RobLog;
class RobLogDefaultTypeInternal;
extern RobLogDefaultTypeInternal _RobLog_default_instance_;
class SendHongbao;
class SendHongbaoDefaultTypeInternal;
extern SendHongbaoDefaultTypeInternal _SendHongbao_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SingleChat;
class SingleChatDefaultTypeInternal;
extern SingleChatDefaultTypeInternal _SingleChat_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::AddFriend* Arena::CreateMaybeMessage<::IM::AddFriend>(Arena*);
template<> ::IM::FriendInfo* Arena::CreateMaybeMessage<::IM::FriendInfo>(Arena*);
template<> ::IM::FriendList* Arena::CreateMaybeMessage<::IM::FriendList>(Arena*);
template<> ::IM::GetFriendInfo* Arena::CreateMaybeMessage<::IM::GetFriendInfo>(Arena*);
template<> ::IM::GroupChat* Arena::CreateMaybeMessage<::IM::GroupChat>(Arena*);
template<> ::IM::HongbaoResp* Arena::CreateMaybeMessage<::IM::HongbaoResp>(Arena*);
template<> ::IM::Hongbaoreq* Arena::CreateMaybeMessage<::IM::Hongbaoreq>(Arena*);
template<> ::IM::Login* Arena::CreateMaybeMessage<::IM::Login>(Arena*);
template<> ::IM::Register* Arena::CreateMaybeMessage<::IM::Register>(Arena*);
template<> ::IM::ReqRobHongbao* Arena::CreateMaybeMessage<::IM::ReqRobHongbao>(Arena*);
template<> ::IM::RespRobHongbao* Arena::CreateMaybeMessage<::IM::RespRobHongbao>(Arena*);
template<> ::IM::Response* Arena::CreateMaybeMessage<::IM::Response>(Arena*);
template<> ::IM::RobLog* Arena::CreateMaybeMessage<::IM::RobLog>(Arena*);
template<> ::IM::SendHongbao* Arena::CreateMaybeMessage<::IM::SendHongbao>(Arena*);
template<> ::IM::Session* Arena::CreateMaybeMessage<::IM::Session>(Arena*);
template<> ::IM::SingleChat* Arena::CreateMaybeMessage<::IM::SingleChat>(Arena*);
template<> ::IM::UserInfo* Arena::CreateMaybeMessage<::IM::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {

// ===================================================================

class Login :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Login* other);
  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const final {
    return CreateMaybeMessage<Login>(nullptr);
  }

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Login";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // optional string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // optional int64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:IM.Login)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class Register :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Register) */ {
 public:
  Register();
  virtual ~Register();

  Register(const Register& from);
  Register(Register&& from) noexcept
    : Register() {
    *this = ::std::move(from);
  }

  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }
  inline Register& operator=(Register&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Register& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Register* internal_default_instance() {
    return reinterpret_cast<const Register*>(
               &_Register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Register* other);
  friend void swap(Register& a, Register& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Register* New() const final {
    return CreateMaybeMessage<Register>(nullptr);
  }

  Register* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Register>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Register* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Register";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // optional string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // optional string mobile = 3;
  bool has_mobile() const;
  void clear_mobile();
  static const int kMobileFieldNumber = 3;
  const std::string& mobile() const;
  void set_mobile(const std::string& value);
  void set_mobile(std::string&& value);
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  std::string* mutable_mobile();
  std::string* release_mobile();
  void set_allocated_mobile(std::string* mobile);

  // optional string nickname = 4;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);

  // optional string sign_info = 8;
  bool has_sign_info() const;
  void clear_sign_info();
  static const int kSignInfoFieldNumber = 8;
  const std::string& sign_info() const;
  void set_sign_info(const std::string& value);
  void set_sign_info(std::string&& value);
  void set_sign_info(const char* value);
  void set_sign_info(const char* value, size_t size);
  std::string* mutable_sign_info();
  std::string* release_sign_info();
  void set_allocated_sign_info(std::string* sign_info);

  // optional string email = 9;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 9;
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);

  // optional int64 age = 6;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 timestamp = 7;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 sex = 5;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IM.Register)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::int64 age_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class SingleChat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.SingleChat) */ {
 public:
  SingleChat();
  virtual ~SingleChat();

  SingleChat(const SingleChat& from);
  SingleChat(SingleChat&& from) noexcept
    : SingleChat() {
    *this = ::std::move(from);
  }

  inline SingleChat& operator=(const SingleChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleChat& operator=(SingleChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SingleChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleChat* internal_default_instance() {
    return reinterpret_cast<const SingleChat*>(
               &_SingleChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SingleChat* other);
  friend void swap(SingleChat& a, SingleChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleChat* New() const final {
    return CreateMaybeMessage<SingleChat>(nullptr);
  }

  SingleChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleChat& from);
  void MergeFrom(const SingleChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.SingleChat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string receiver = 1;
  bool has_receiver() const;
  void clear_receiver();
  static const int kReceiverFieldNumber = 1;
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);

  // optional string sender = 2;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // optional string message = 4;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // optional .IM.Hongbaoreq hbreq = 5;
  bool has_hbreq() const;
  void clear_hbreq();
  static const int kHbreqFieldNumber = 5;
  const ::IM::Hongbaoreq& hbreq() const;
  ::IM::Hongbaoreq* release_hbreq();
  ::IM::Hongbaoreq* mutable_hbreq();
  void set_allocated_hbreq(::IM::Hongbaoreq* hbreq);

  // optional .IM.HongbaoResp hbrsp = 6;
  bool has_hbrsp() const;
  void clear_hbrsp();
  static const int kHbrspFieldNumber = 6;
  const ::IM::HongbaoResp& hbrsp() const;
  ::IM::HongbaoResp* release_hbrsp();
  ::IM::HongbaoResp* mutable_hbrsp();
  void set_allocated_hbrsp(::IM::HongbaoResp* hbrsp);

  // optional .IM.ReqRobHongbao robhbreq = 7;
  bool has_robhbreq() const;
  void clear_robhbreq();
  static const int kRobhbreqFieldNumber = 7;
  const ::IM::ReqRobHongbao& robhbreq() const;
  ::IM::ReqRobHongbao* release_robhbreq();
  ::IM::ReqRobHongbao* mutable_robhbreq();
  void set_allocated_robhbreq(::IM::ReqRobHongbao* robhbreq);

  // optional .IM.RespRobHongbao robhbrsp = 8;
  bool has_robhbrsp() const;
  void clear_robhbrsp();
  static const int kRobhbrspFieldNumber = 8;
  const ::IM::RespRobHongbao& robhbrsp() const;
  ::IM::RespRobHongbao* release_robhbrsp();
  ::IM::RespRobHongbao* mutable_robhbrsp();
  void set_allocated_robhbrsp(::IM::RespRobHongbao* robhbrsp);

  // optional int64 timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IM.SingleChat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::IM::Hongbaoreq* hbreq_;
  ::IM::HongbaoResp* hbrsp_;
  ::IM::ReqRobHongbao* robhbreq_;
  ::IM::RespRobHongbao* robhbrsp_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class Hongbaoreq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Hongbaoreq) */ {
 public:
  Hongbaoreq();
  virtual ~Hongbaoreq();

  Hongbaoreq(const Hongbaoreq& from);
  Hongbaoreq(Hongbaoreq&& from) noexcept
    : Hongbaoreq() {
    *this = ::std::move(from);
  }

  inline Hongbaoreq& operator=(const Hongbaoreq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hongbaoreq& operator=(Hongbaoreq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Hongbaoreq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hongbaoreq* internal_default_instance() {
    return reinterpret_cast<const Hongbaoreq*>(
               &_Hongbaoreq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Hongbaoreq* other);
  friend void swap(Hongbaoreq& a, Hongbaoreq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hongbaoreq* New() const final {
    return CreateMaybeMessage<Hongbaoreq>(nullptr);
  }

  Hongbaoreq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hongbaoreq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hongbaoreq& from);
  void MergeFrom(const Hongbaoreq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hongbaoreq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Hongbaoreq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sender = 1;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // optional string receiver = 5;
  bool has_receiver() const;
  void clear_receiver();
  static const int kReceiverFieldNumber = 5;
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);

  // optional double money = 2;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 2;
  double money() const;
  void set_money(double value);

  // optional int64 category = 3;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 category() const;
  void set_category(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:IM.Hongbaoreq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  double money_;
  ::PROTOBUF_NAMESPACE_ID::int64 category_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class HongbaoResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.HongbaoResp) */ {
 public:
  HongbaoResp();
  virtual ~HongbaoResp();

  HongbaoResp(const HongbaoResp& from);
  HongbaoResp(HongbaoResp&& from) noexcept
    : HongbaoResp() {
    *this = ::std::move(from);
  }

  inline HongbaoResp& operator=(const HongbaoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline HongbaoResp& operator=(HongbaoResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HongbaoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HongbaoResp* internal_default_instance() {
    return reinterpret_cast<const HongbaoResp*>(
               &_HongbaoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(HongbaoResp* other);
  friend void swap(HongbaoResp& a, HongbaoResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HongbaoResp* New() const final {
    return CreateMaybeMessage<HongbaoResp>(nullptr);
  }

  HongbaoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HongbaoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HongbaoResp& from);
  void MergeFrom(const HongbaoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HongbaoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.HongbaoResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hongbaokey = 1;
  bool has_hongbaokey() const;
  void clear_hongbaokey();
  static const int kHongbaokeyFieldNumber = 1;
  const std::string& hongbaokey() const;
  void set_hongbaokey(const std::string& value);
  void set_hongbaokey(std::string&& value);
  void set_hongbaokey(const char* value);
  void set_hongbaokey(const char* value, size_t size);
  std::string* mutable_hongbaokey();
  std::string* release_hongbaokey();
  void set_allocated_hongbaokey(std::string* hongbaokey);

  // optional string sender = 2;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional bool isok = 3 [default = false];
  bool has_isok() const;
  void clear_isok();
  static const int kIsokFieldNumber = 3;
  bool isok() const;
  void set_isok(bool value);

  // @@protoc_insertion_point(class_scope:IM.HongbaoResp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hongbaokey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool isok_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class ReqRobHongbao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.ReqRobHongbao) */ {
 public:
  ReqRobHongbao();
  virtual ~ReqRobHongbao();

  ReqRobHongbao(const ReqRobHongbao& from);
  ReqRobHongbao(ReqRobHongbao&& from) noexcept
    : ReqRobHongbao() {
    *this = ::std::move(from);
  }

  inline ReqRobHongbao& operator=(const ReqRobHongbao& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRobHongbao& operator=(ReqRobHongbao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqRobHongbao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqRobHongbao* internal_default_instance() {
    return reinterpret_cast<const ReqRobHongbao*>(
               &_ReqRobHongbao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReqRobHongbao* other);
  friend void swap(ReqRobHongbao& a, ReqRobHongbao& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqRobHongbao* New() const final {
    return CreateMaybeMessage<ReqRobHongbao>(nullptr);
  }

  ReqRobHongbao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRobHongbao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRobHongbao& from);
  void MergeFrom(const ReqRobHongbao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRobHongbao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.ReqRobHongbao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hongbaokey = 1;
  bool has_hongbaokey() const;
  void clear_hongbaokey();
  static const int kHongbaokeyFieldNumber = 1;
  const std::string& hongbaokey() const;
  void set_hongbaokey(const std::string& value);
  void set_hongbaokey(std::string&& value);
  void set_hongbaokey(const char* value);
  void set_hongbaokey(const char* value, size_t size);
  std::string* mutable_hongbaokey();
  std::string* release_hongbaokey();
  void set_allocated_hongbaokey(std::string* hongbaokey);

  // optional string sender = 2;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // optional string selfname = 3;
  bool has_selfname() const;
  void clear_selfname();
  static const int kSelfnameFieldNumber = 3;
  const std::string& selfname() const;
  void set_selfname(const std::string& value);
  void set_selfname(std::string&& value);
  void set_selfname(const char* value);
  void set_selfname(const char* value, size_t size);
  std::string* mutable_selfname();
  std::string* release_selfname();
  void set_allocated_selfname(std::string* selfname);

  // @@protoc_insertion_point(class_scope:IM.ReqRobHongbao)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hongbaokey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selfname_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class RespRobHongbao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.RespRobHongbao) */ {
 public:
  RespRobHongbao();
  virtual ~RespRobHongbao();

  RespRobHongbao(const RespRobHongbao& from);
  RespRobHongbao(RespRobHongbao&& from) noexcept
    : RespRobHongbao() {
    *this = ::std::move(from);
  }

  inline RespRobHongbao& operator=(const RespRobHongbao& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespRobHongbao& operator=(RespRobHongbao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RespRobHongbao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespRobHongbao* internal_default_instance() {
    return reinterpret_cast<const RespRobHongbao*>(
               &_RespRobHongbao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RespRobHongbao* other);
  friend void swap(RespRobHongbao& a, RespRobHongbao& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RespRobHongbao* New() const final {
    return CreateMaybeMessage<RespRobHongbao>(nullptr);
  }

  RespRobHongbao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespRobHongbao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespRobHongbao& from);
  void MergeFrom(const RespRobHongbao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespRobHongbao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.RespRobHongbao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hongbaokey = 1;
  bool has_hongbaokey() const;
  void clear_hongbaokey();
  static const int kHongbaokeyFieldNumber = 1;
  const std::string& hongbaokey() const;
  void set_hongbaokey(const std::string& value);
  void set_hongbaokey(std::string&& value);
  void set_hongbaokey(const char* value);
  void set_hongbaokey(const char* value, size_t size);
  std::string* mutable_hongbaokey();
  std::string* release_hongbaokey();
  void set_allocated_hongbaokey(std::string* hongbaokey);

  // optional string sender = 2;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // optional string description = 7;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional double robmoney = 3;
  bool has_robmoney() const;
  void clear_robmoney();
  static const int kRobmoneyFieldNumber = 3;
  double robmoney() const;
  void set_robmoney(double value);

  // optional int64 totalcount = 4;
  bool has_totalcount() const;
  void clear_totalcount();
  static const int kTotalcountFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 totalcount() const;
  void set_totalcount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 leftcount = 5;
  bool has_leftcount() const;
  void clear_leftcount();
  static const int kLeftcountFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 leftcount() const;
  void set_leftcount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool isok = 6;
  bool has_isok() const;
  void clear_isok();
  static const int kIsokFieldNumber = 6;
  bool isok() const;
  void set_isok(bool value);

  // @@protoc_insertion_point(class_scope:IM.RespRobHongbao)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hongbaokey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  double robmoney_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 leftcount_;
  bool isok_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class GroupChat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.GroupChat) */ {
 public:
  GroupChat();
  virtual ~GroupChat();

  GroupChat(const GroupChat& from);
  GroupChat(GroupChat&& from) noexcept
    : GroupChat() {
    *this = ::std::move(from);
  }

  inline GroupChat& operator=(const GroupChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChat& operator=(GroupChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GroupChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChat* internal_default_instance() {
    return reinterpret_cast<const GroupChat*>(
               &_GroupChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GroupChat* other);
  friend void swap(GroupChat& a, GroupChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupChat* New() const final {
    return CreateMaybeMessage<GroupChat>(nullptr);
  }

  GroupChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupChat& from);
  void MergeFrom(const GroupChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.GroupChat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string groupid = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);

  // optional string sender = 2;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // optional string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // optional int64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:IM.GroupChat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class AddFriend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.AddFriend) */ {
 public:
  AddFriend();
  virtual ~AddFriend();

  AddFriend(const AddFriend& from);
  AddFriend(AddFriend&& from) noexcept
    : AddFriend() {
    *this = ::std::move(from);
  }

  inline AddFriend& operator=(const AddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriend& operator=(AddFriend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddFriend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriend* internal_default_instance() {
    return reinterpret_cast<const AddFriend*>(
               &_AddFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AddFriend* other);
  friend void swap(AddFriend& a, AddFriend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFriend* New() const final {
    return CreateMaybeMessage<AddFriend>(nullptr);
  }

  AddFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFriend& from);
  void MergeFrom(const AddFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.AddFriend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string receiver = 1;
  bool has_receiver() const;
  void clear_receiver();
  static const int kReceiverFieldNumber = 1;
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);

  // optional string sender = 2;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // optional string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // optional int64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:IM.AddFriend)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class GetFriendInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.GetFriendInfo) */ {
 public:
  GetFriendInfo();
  virtual ~GetFriendInfo();

  GetFriendInfo(const GetFriendInfo& from);
  GetFriendInfo(GetFriendInfo&& from) noexcept
    : GetFriendInfo() {
    *this = ::std::move(from);
  }

  inline GetFriendInfo& operator=(const GetFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendInfo& operator=(GetFriendInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetFriendInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendInfo* internal_default_instance() {
    return reinterpret_cast<const GetFriendInfo*>(
               &_GetFriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetFriendInfo* other);
  friend void swap(GetFriendInfo& a, GetFriendInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFriendInfo* New() const final {
    return CreateMaybeMessage<GetFriendInfo>(nullptr);
  }

  GetFriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendInfo& from);
  void MergeFrom(const GetFriendInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.GetFriendInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sender = 1;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // optional string friend = 2;
  bool has_friend_() const;
  void clear_friend_();
  static const int kFriendFieldNumber = 2;
  const std::string& friend_() const;
  void set_friend_(const std::string& value);
  void set_friend_(std::string&& value);
  void set_friend_(const char* value);
  void set_friend_(const char* value, size_t size);
  std::string* mutable_friend_();
  std::string* release_friend_();
  void set_allocated_friend_(std::string* friend_);

  // optional int64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:IM.GetFriendInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend__;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class FriendInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.FriendInfo) */ {
 public:
  FriendInfo();
  virtual ~FriendInfo();

  FriendInfo(const FriendInfo& from);
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FriendInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(FriendInfo* other);
  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendInfo* New() const final {
    return CreateMaybeMessage<FriendInfo>(nullptr);
  }

  FriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendInfo& from);
  void MergeFrom(const FriendInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.FriendInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mobile = 1;
  bool has_mobile() const;
  void clear_mobile();
  static const int kMobileFieldNumber = 1;
  const std::string& mobile() const;
  void set_mobile(const std::string& value);
  void set_mobile(std::string&& value);
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  std::string* mutable_mobile();
  std::string* release_mobile();
  void set_allocated_mobile(std::string* mobile);

  // optional string nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);

  // optional string sex = 3;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 3;
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);

  // optional int64 age = 4;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:IM.FriendInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::int64 age_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class FriendList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.FriendList) */ {
 public:
  FriendList();
  virtual ~FriendList();

  FriendList(const FriendList& from);
  FriendList(FriendList&& from) noexcept
    : FriendList() {
    *this = ::std::move(from);
  }

  inline FriendList& operator=(const FriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendList& operator=(FriendList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FriendList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendList* internal_default_instance() {
    return reinterpret_cast<const FriendList*>(
               &_FriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(FriendList* other);
  friend void swap(FriendList& a, FriendList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendList* New() const final {
    return CreateMaybeMessage<FriendList>(nullptr);
  }

  FriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendList& from);
  void MergeFrom(const FriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.FriendList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.FriendInfo friendlist = 1;
  int friendlist_size() const;
  void clear_friendlist();
  static const int kFriendlistFieldNumber = 1;
  ::IM::FriendInfo* mutable_friendlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::FriendInfo >*
      mutable_friendlist();
  const ::IM::FriendInfo& friendlist(int index) const;
  ::IM::FriendInfo* add_friendlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::FriendInfo >&
      friendlist() const;

  // optional int64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:IM.FriendList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::FriendInfo > friendlist_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional bool result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:IM.Response)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool result_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class Session :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Session* other);
  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(nullptr);
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Session";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 3;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // optional string redisname = 4;
  bool has_redisname() const;
  void clear_redisname();
  static const int kRedisnameFieldNumber = 4;
  const std::string& redisname() const;
  void set_redisname(const std::string& value);
  void set_redisname(std::string&& value);
  void set_redisname(const char* value);
  void set_redisname(const char* value, size_t size);
  std::string* mutable_redisname();
  std::string* release_redisname();
  void set_allocated_redisname(std::string* redisname);

  // optional .IM.UserInfo userinfo = 5;
  bool has_userinfo() const;
  void clear_userinfo();
  static const int kUserinfoFieldNumber = 5;
  const ::IM::UserInfo& userinfo() const;
  ::IM::UserInfo* release_userinfo();
  ::IM::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::IM::UserInfo* userinfo);

  // optional int64 hashkey = 2;
  bool has_hashkey() const;
  void clear_hashkey();
  static const int kHashkeyFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 hashkey() const;
  void set_hashkey(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool islogin = 1;
  bool has_islogin() const;
  void clear_islogin();
  static const int kIsloginFieldNumber = 1;
  bool islogin() const;
  void set_islogin(bool value);

  // @@protoc_insertion_point(class_scope:IM.Session)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redisname_;
  ::IM::UserInfo* userinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 hashkey_;
  bool islogin_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class UserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.UserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string nick = 5;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 5;
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);

  // optional string phone = 6;
  bool has_phone() const;
  void clear_phone();
  static const int kPhoneFieldNumber = 6;
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);

  // optional string email = 7;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 7;
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);

  // optional string sign_info = 10;
  bool has_sign_info() const;
  void clear_sign_info();
  static const int kSignInfoFieldNumber = 10;
  const std::string& sign_info() const;
  void set_sign_info(const std::string& value);
  void set_sign_info(std::string&& value);
  void set_sign_info(const char* value);
  void set_sign_info(const char* value, size_t size);
  std::string* mutable_sign_info();
  std::string* release_sign_info();
  void set_allocated_sign_info(std::string* sign_info);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 sex = 2;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 age = 3;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 createtime = 8;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreatetimeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 updatetime = 9;
  bool has_updatetime() const;
  void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 updatetime() const;
  void set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double money = 11;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 11;
  double money() const;
  void set_money(double value);

  // @@protoc_insertion_point(class_scope:IM.UserInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatetime_;
  double money_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class SendHongbao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.SendHongbao) */ {
 public:
  SendHongbao();
  virtual ~SendHongbao();

  SendHongbao(const SendHongbao& from);
  SendHongbao(SendHongbao&& from) noexcept
    : SendHongbao() {
    *this = ::std::move(from);
  }

  inline SendHongbao& operator=(const SendHongbao& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendHongbao& operator=(SendHongbao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SendHongbao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendHongbao* internal_default_instance() {
    return reinterpret_cast<const SendHongbao*>(
               &_SendHongbao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SendHongbao* other);
  friend void swap(SendHongbao& a, SendHongbao& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendHongbao* New() const final {
    return CreateMaybeMessage<SendHongbao>(nullptr);
  }

  SendHongbao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendHongbao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendHongbao& from);
  void MergeFrom(const SendHongbao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendHongbao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.SendHongbao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.RobLog robitem = 8;
  int robitem_size() const;
  void clear_robitem();
  static const int kRobitemFieldNumber = 8;
  ::IM::RobLog* mutable_robitem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::RobLog >*
      mutable_robitem();
  const ::IM::RobLog& robitem(int index) const;
  ::IM::RobLog* add_robitem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::RobLog >&
      robitem() const;

  // optional string sender = 1;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // optional string receiver = 7;
  bool has_receiver() const;
  void clear_receiver();
  static const int kReceiverFieldNumber = 7;
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);

  // optional double money = 2;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 2;
  double money() const;
  void set_money(double value);

  // optional double leftmoney = 3;
  bool has_leftmoney() const;
  void clear_leftmoney();
  static const int kLeftmoneyFieldNumber = 3;
  double leftmoney() const;
  void set_leftmoney(double value);

  // optional int64 category = 4;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 category() const;
  void set_category(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 count = 5;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 leftcount = 6;
  bool has_leftcount() const;
  void clear_leftcount();
  static const int kLeftcountFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 leftcount() const;
  void set_leftcount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:IM.SendHongbao)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::RobLog > robitem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  double money_;
  double leftmoney_;
  ::PROTOBUF_NAMESPACE_ID::int64 category_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 leftcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_IM_2eproto;
};
// -------------------------------------------------------------------

class RobLog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IM.RobLog) */ {
 public:
  RobLog();
  virtual ~RobLog();

  RobLog(const RobLog& from);
  RobLog(RobLog&& from) noexcept
    : RobLog() {
    *this = ::std::move(from);
  }

  inline RobLog& operator=(const RobLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobLog& operator=(RobLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RobLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobLog* internal_default_instance() {
    return reinterpret_cast<const RobLog*>(
               &_RobLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(RobLog* other);
  friend void swap(RobLog& a, RobLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobLog* New() const final {
    return CreateMaybeMessage<RobLog>(nullptr);
  }

  RobLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobLog& from);
  void MergeFrom(const RobLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.RobLog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional double money = 2;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 2;
  double money() const;
  void set_money(double value);

  // optional int64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:IM.RobLog)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double money_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  friend struct ::TableStruct_IM_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login

// optional string username = 1;
inline bool Login::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Login::username() const {
  // @@protoc_insertion_point(field_get:IM.Login.username)
  return username_.GetNoArena();
}
inline void Login::set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.username)
}
inline void Login::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.username)
}
inline void Login::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.username)
}
inline void Login::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.username)
}
inline std::string* Login::mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.Login.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login::release_username() {
  // @@protoc_insertion_point(field_release:IM.Login.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.username)
}

// optional string password = 2;
inline bool Login::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:IM.Login.password)
  return password_.GetNoArena();
}
inline void Login::set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.password)
}
inline void Login::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.password)
}
inline void Login::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.password)
}
inline void Login::set_password(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.password)
}
inline std::string* Login::mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.Login.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login::release_password() {
  // @@protoc_insertion_point(field_release:IM.Login.password)
  if (!has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.password)
}

// optional int64 timestamp = 3;
inline bool Login::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Login::timestamp() const {
  // @@protoc_insertion_point(field_get:IM.Login.timestamp)
  return timestamp_;
}
inline void Login::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.timestamp)
}

// -------------------------------------------------------------------

// Register

// optional string username = 1;
inline bool Register::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Register::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Register::username() const {
  // @@protoc_insertion_point(field_get:IM.Register.username)
  return username_.GetNoArena();
}
inline void Register::set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Register.username)
}
inline void Register::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Register.username)
}
inline void Register::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Register.username)
}
inline void Register::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Register.username)
}
inline std::string* Register::mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.Register.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Register::release_username() {
  // @@protoc_insertion_point(field_release:IM.Register.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:IM.Register.username)
}

// optional string password = 2;
inline bool Register::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Register::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Register::password() const {
  // @@protoc_insertion_point(field_get:IM.Register.password)
  return password_.GetNoArena();
}
inline void Register::set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Register.password)
}
inline void Register::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Register.password)
}
inline void Register::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Register.password)
}
inline void Register::set_password(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Register.password)
}
inline std::string* Register::mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.Register.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Register::release_password() {
  // @@protoc_insertion_point(field_release:IM.Register.password)
  if (!has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:IM.Register.password)
}

// optional string mobile = 3;
inline bool Register::has_mobile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Register::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Register::mobile() const {
  // @@protoc_insertion_point(field_get:IM.Register.mobile)
  return mobile_.GetNoArena();
}
inline void Register::set_mobile(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Register.mobile)
}
inline void Register::set_mobile(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  mobile_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Register.mobile)
}
inline void Register::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Register.mobile)
}
inline void Register::set_mobile(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Register.mobile)
}
inline std::string* Register::mutable_mobile() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:IM.Register.mobile)
  return mobile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Register::release_mobile() {
  // @@protoc_insertion_point(field_release:IM.Register.mobile)
  if (!has_mobile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return mobile_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_mobile(std::string* mobile) {
  if (mobile != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mobile_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:IM.Register.mobile)
}

// optional string nickname = 4;
inline bool Register::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Register::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Register::nickname() const {
  // @@protoc_insertion_point(field_get:IM.Register.nickname)
  return nickname_.GetNoArena();
}
inline void Register::set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Register.nickname)
}
inline void Register::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Register.nickname)
}
inline void Register::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Register.nickname)
}
inline void Register::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Register.nickname)
}
inline std::string* Register::mutable_nickname() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:IM.Register.nickname)
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Register::release_nickname() {
  // @@protoc_insertion_point(field_release:IM.Register.nickname)
  if (!has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return nickname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:IM.Register.nickname)
}

// optional int32 sex = 5;
inline bool Register::has_sex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Register::clear_sex() {
  sex_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Register::sex() const {
  // @@protoc_insertion_point(field_get:IM.Register.sex)
  return sex_;
}
inline void Register::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  sex_ = value;
  // @@protoc_insertion_point(field_set:IM.Register.sex)
}

// optional int64 age = 6;
inline bool Register::has_age() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Register::clear_age() {
  age_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Register::age() const {
  // @@protoc_insertion_point(field_get:IM.Register.age)
  return age_;
}
inline void Register::set_age(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  age_ = value;
  // @@protoc_insertion_point(field_set:IM.Register.age)
}

// optional int64 timestamp = 7;
inline bool Register::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Register::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Register::timestamp() const {
  // @@protoc_insertion_point(field_get:IM.Register.timestamp)
  return timestamp_;
}
inline void Register::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IM.Register.timestamp)
}

// optional string sign_info = 8;
inline bool Register::has_sign_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Register::clear_sign_info() {
  sign_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Register::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.Register.sign_info)
  return sign_info_.GetNoArena();
}
inline void Register::set_sign_info(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  sign_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Register.sign_info)
}
inline void Register::set_sign_info(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  sign_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Register.sign_info)
}
inline void Register::set_sign_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  sign_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Register.sign_info)
}
inline void Register::set_sign_info(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  sign_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Register.sign_info)
}
inline std::string* Register::mutable_sign_info() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:IM.Register.sign_info)
  return sign_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Register::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.Register.sign_info)
  if (!has_sign_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return sign_info_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_sign_info(std::string* sign_info) {
  if (sign_info != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sign_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign_info);
  // @@protoc_insertion_point(field_set_allocated:IM.Register.sign_info)
}

// optional string email = 9;
inline bool Register::has_email() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Register::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Register::email() const {
  // @@protoc_insertion_point(field_get:IM.Register.email)
  return email_.GetNoArena();
}
inline void Register::set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Register.email)
}
inline void Register::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Register.email)
}
inline void Register::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Register.email)
}
inline void Register::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Register.email)
}
inline std::string* Register::mutable_email() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:IM.Register.email)
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Register::release_email() {
  // @@protoc_insertion_point(field_release:IM.Register.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:IM.Register.email)
}

// -------------------------------------------------------------------

// SingleChat

// optional string receiver = 1;
inline bool SingleChat::has_receiver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleChat::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SingleChat::receiver() const {
  // @@protoc_insertion_point(field_get:IM.SingleChat.receiver)
  return receiver_.GetNoArena();
}
inline void SingleChat::set_receiver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.SingleChat.receiver)
}
inline void SingleChat::set_receiver(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.SingleChat.receiver)
}
inline void SingleChat::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.SingleChat.receiver)
}
inline void SingleChat::set_receiver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.SingleChat.receiver)
}
inline std::string* SingleChat::mutable_receiver() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.SingleChat.receiver)
  return receiver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleChat::release_receiver() {
  // @@protoc_insertion_point(field_release:IM.SingleChat.receiver)
  if (!has_receiver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return receiver_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleChat::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  receiver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:IM.SingleChat.receiver)
}

// optional string sender = 2;
inline bool SingleChat::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleChat::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SingleChat::sender() const {
  // @@protoc_insertion_point(field_get:IM.SingleChat.sender)
  return sender_.GetNoArena();
}
inline void SingleChat::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.SingleChat.sender)
}
inline void SingleChat::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.SingleChat.sender)
}
inline void SingleChat::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.SingleChat.sender)
}
inline void SingleChat::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.SingleChat.sender)
}
inline std::string* SingleChat::mutable_sender() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.SingleChat.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleChat::release_sender() {
  // @@protoc_insertion_point(field_release:IM.SingleChat.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleChat::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:IM.SingleChat.sender)
}

// optional int32 type = 3;
inline bool SingleChat::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SingleChat::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleChat::type() const {
  // @@protoc_insertion_point(field_get:IM.SingleChat.type)
  return type_;
}
inline void SingleChat::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  type_ = value;
  // @@protoc_insertion_point(field_set:IM.SingleChat.type)
}

// optional string message = 4;
inline bool SingleChat::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleChat::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SingleChat::message() const {
  // @@protoc_insertion_point(field_get:IM.SingleChat.message)
  return message_.GetNoArena();
}
inline void SingleChat::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.SingleChat.message)
}
inline void SingleChat::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.SingleChat.message)
}
inline void SingleChat::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.SingleChat.message)
}
inline void SingleChat::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.SingleChat.message)
}
inline std::string* SingleChat::mutable_message() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:IM.SingleChat.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SingleChat::release_message() {
  // @@protoc_insertion_point(field_release:IM.SingleChat.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SingleChat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:IM.SingleChat.message)
}

// optional .IM.Hongbaoreq hbreq = 5;
inline bool SingleChat::has_hbreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleChat::clear_hbreq() {
  if (hbreq_ != nullptr) hbreq_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::IM::Hongbaoreq& SingleChat::hbreq() const {
  const ::IM::Hongbaoreq* p = hbreq_;
  // @@protoc_insertion_point(field_get:IM.SingleChat.hbreq)
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::Hongbaoreq*>(
      &::IM::_Hongbaoreq_default_instance_);
}
inline ::IM::Hongbaoreq* SingleChat::release_hbreq() {
  // @@protoc_insertion_point(field_release:IM.SingleChat.hbreq)
  _has_bits_[0] &= ~0x00000008u;
  ::IM::Hongbaoreq* temp = hbreq_;
  hbreq_ = nullptr;
  return temp;
}
inline ::IM::Hongbaoreq* SingleChat::mutable_hbreq() {
  _has_bits_[0] |= 0x00000008u;
  if (hbreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::Hongbaoreq>(GetArenaNoVirtual());
    hbreq_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IM.SingleChat.hbreq)
  return hbreq_;
}
inline void SingleChat::set_allocated_hbreq(::IM::Hongbaoreq* hbreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hbreq_;
  }
  if (hbreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hbreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hbreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  hbreq_ = hbreq;
  // @@protoc_insertion_point(field_set_allocated:IM.SingleChat.hbreq)
}

// optional .IM.HongbaoResp hbrsp = 6;
inline bool SingleChat::has_hbrsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SingleChat::clear_hbrsp() {
  if (hbrsp_ != nullptr) hbrsp_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::IM::HongbaoResp& SingleChat::hbrsp() const {
  const ::IM::HongbaoResp* p = hbrsp_;
  // @@protoc_insertion_point(field_get:IM.SingleChat.hbrsp)
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::HongbaoResp*>(
      &::IM::_HongbaoResp_default_instance_);
}
inline ::IM::HongbaoResp* SingleChat::release_hbrsp() {
  // @@protoc_insertion_point(field_release:IM.SingleChat.hbrsp)
  _has_bits_[0] &= ~0x00000010u;
  ::IM::HongbaoResp* temp = hbrsp_;
  hbrsp_ = nullptr;
  return temp;
}
inline ::IM::HongbaoResp* SingleChat::mutable_hbrsp() {
  _has_bits_[0] |= 0x00000010u;
  if (hbrsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::HongbaoResp>(GetArenaNoVirtual());
    hbrsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IM.SingleChat.hbrsp)
  return hbrsp_;
}
inline void SingleChat::set_allocated_hbrsp(::IM::HongbaoResp* hbrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hbrsp_;
  }
  if (hbrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hbrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hbrsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  hbrsp_ = hbrsp;
  // @@protoc_insertion_point(field_set_allocated:IM.SingleChat.hbrsp)
}

// optional .IM.ReqRobHongbao robhbreq = 7;
inline bool SingleChat::has_robhbreq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SingleChat::clear_robhbreq() {
  if (robhbreq_ != nullptr) robhbreq_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::IM::ReqRobHongbao& SingleChat::robhbreq() const {
  const ::IM::ReqRobHongbao* p = robhbreq_;
  // @@protoc_insertion_point(field_get:IM.SingleChat.robhbreq)
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::ReqRobHongbao*>(
      &::IM::_ReqRobHongbao_default_instance_);
}
inline ::IM::ReqRobHongbao* SingleChat::release_robhbreq() {
  // @@protoc_insertion_point(field_release:IM.SingleChat.robhbreq)
  _has_bits_[0] &= ~0x00000020u;
  ::IM::ReqRobHongbao* temp = robhbreq_;
  robhbreq_ = nullptr;
  return temp;
}
inline ::IM::ReqRobHongbao* SingleChat::mutable_robhbreq() {
  _has_bits_[0] |= 0x00000020u;
  if (robhbreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::ReqRobHongbao>(GetArenaNoVirtual());
    robhbreq_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IM.SingleChat.robhbreq)
  return robhbreq_;
}
inline void SingleChat::set_allocated_robhbreq(::IM::ReqRobHongbao* robhbreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete robhbreq_;
  }
  if (robhbreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      robhbreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robhbreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  robhbreq_ = robhbreq;
  // @@protoc_insertion_point(field_set_allocated:IM.SingleChat.robhbreq)
}

// optional .IM.RespRobHongbao robhbrsp = 8;
inline bool SingleChat::has_robhbrsp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SingleChat::clear_robhbrsp() {
  if (robhbrsp_ != nullptr) robhbrsp_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::IM::RespRobHongbao& SingleChat::robhbrsp() const {
  const ::IM::RespRobHongbao* p = robhbrsp_;
  // @@protoc_insertion_point(field_get:IM.SingleChat.robhbrsp)
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::RespRobHongbao*>(
      &::IM::_RespRobHongbao_default_instance_);
}
inline ::IM::RespRobHongbao* SingleChat::release_robhbrsp() {
  // @@protoc_insertion_point(field_release:IM.SingleChat.robhbrsp)
  _has_bits_[0] &= ~0x00000040u;
  ::IM::RespRobHongbao* temp = robhbrsp_;
  robhbrsp_ = nullptr;
  return temp;
}
inline ::IM::RespRobHongbao* SingleChat::mutable_robhbrsp() {
  _has_bits_[0] |= 0x00000040u;
  if (robhbrsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::RespRobHongbao>(GetArenaNoVirtual());
    robhbrsp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IM.SingleChat.robhbrsp)
  return robhbrsp_;
}
inline void SingleChat::set_allocated_robhbrsp(::IM::RespRobHongbao* robhbrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete robhbrsp_;
  }
  if (robhbrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      robhbrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robhbrsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  robhbrsp_ = robhbrsp;
  // @@protoc_insertion_point(field_set_allocated:IM.SingleChat.robhbrsp)
}

// optional int64 timestamp = 9;
inline bool SingleChat::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SingleChat::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SingleChat::timestamp() const {
  // @@protoc_insertion_point(field_get:IM.SingleChat.timestamp)
  return timestamp_;
}
inline void SingleChat::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IM.SingleChat.timestamp)
}

// -------------------------------------------------------------------

// Hongbaoreq

// optional string sender = 1;
inline bool Hongbaoreq::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hongbaoreq::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Hongbaoreq::sender() const {
  // @@protoc_insertion_point(field_get:IM.Hongbaoreq.sender)
  return sender_.GetNoArena();
}
inline void Hongbaoreq::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Hongbaoreq.sender)
}
inline void Hongbaoreq::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Hongbaoreq.sender)
}
inline void Hongbaoreq::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Hongbaoreq.sender)
}
inline void Hongbaoreq::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Hongbaoreq.sender)
}
inline std::string* Hongbaoreq::mutable_sender() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.Hongbaoreq.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Hongbaoreq::release_sender() {
  // @@protoc_insertion_point(field_release:IM.Hongbaoreq.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Hongbaoreq::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:IM.Hongbaoreq.sender)
}

// optional double money = 2;
inline bool Hongbaoreq::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Hongbaoreq::clear_money() {
  money_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Hongbaoreq::money() const {
  // @@protoc_insertion_point(field_get:IM.Hongbaoreq.money)
  return money_;
}
inline void Hongbaoreq::set_money(double value) {
  _has_bits_[0] |= 0x00000004u;
  money_ = value;
  // @@protoc_insertion_point(field_set:IM.Hongbaoreq.money)
}

// optional int64 category = 3;
inline bool Hongbaoreq::has_category() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Hongbaoreq::clear_category() {
  category_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hongbaoreq::category() const {
  // @@protoc_insertion_point(field_get:IM.Hongbaoreq.category)
  return category_;
}
inline void Hongbaoreq::set_category(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  category_ = value;
  // @@protoc_insertion_point(field_set:IM.Hongbaoreq.category)
}

// optional int64 count = 4;
inline bool Hongbaoreq::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Hongbaoreq::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hongbaoreq::count() const {
  // @@protoc_insertion_point(field_get:IM.Hongbaoreq.count)
  return count_;
}
inline void Hongbaoreq::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  count_ = value;
  // @@protoc_insertion_point(field_set:IM.Hongbaoreq.count)
}

// optional string receiver = 5;
inline bool Hongbaoreq::has_receiver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hongbaoreq::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Hongbaoreq::receiver() const {
  // @@protoc_insertion_point(field_get:IM.Hongbaoreq.receiver)
  return receiver_.GetNoArena();
}
inline void Hongbaoreq::set_receiver(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Hongbaoreq.receiver)
}
inline void Hongbaoreq::set_receiver(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Hongbaoreq.receiver)
}
inline void Hongbaoreq::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Hongbaoreq.receiver)
}
inline void Hongbaoreq::set_receiver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Hongbaoreq.receiver)
}
inline std::string* Hongbaoreq::mutable_receiver() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.Hongbaoreq.receiver)
  return receiver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Hongbaoreq::release_receiver() {
  // @@protoc_insertion_point(field_release:IM.Hongbaoreq.receiver)
  if (!has_receiver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return receiver_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Hongbaoreq::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  receiver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:IM.Hongbaoreq.receiver)
}

// optional int64 timestamp = 6;
inline bool Hongbaoreq::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Hongbaoreq::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hongbaoreq::timestamp() const {
  // @@protoc_insertion_point(field_get:IM.Hongbaoreq.timestamp)
  return timestamp_;
}
inline void Hongbaoreq::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IM.Hongbaoreq.timestamp)
}

// -------------------------------------------------------------------

// HongbaoResp

// optional string hongbaokey = 1;
inline bool HongbaoResp::has_hongbaokey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HongbaoResp::clear_hongbaokey() {
  hongbaokey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HongbaoResp::hongbaokey() const {
  // @@protoc_insertion_point(field_get:IM.HongbaoResp.hongbaokey)
  return hongbaokey_.GetNoArena();
}
inline void HongbaoResp::set_hongbaokey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.HongbaoResp.hongbaokey)
}
inline void HongbaoResp::set_hongbaokey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.HongbaoResp.hongbaokey)
}
inline void HongbaoResp::set_hongbaokey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.HongbaoResp.hongbaokey)
}
inline void HongbaoResp::set_hongbaokey(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.HongbaoResp.hongbaokey)
}
inline std::string* HongbaoResp::mutable_hongbaokey() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.HongbaoResp.hongbaokey)
  return hongbaokey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HongbaoResp::release_hongbaokey() {
  // @@protoc_insertion_point(field_release:IM.HongbaoResp.hongbaokey)
  if (!has_hongbaokey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hongbaokey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HongbaoResp::set_allocated_hongbaokey(std::string* hongbaokey) {
  if (hongbaokey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hongbaokey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hongbaokey);
  // @@protoc_insertion_point(field_set_allocated:IM.HongbaoResp.hongbaokey)
}

// optional string sender = 2;
inline bool HongbaoResp::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HongbaoResp::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HongbaoResp::sender() const {
  // @@protoc_insertion_point(field_get:IM.HongbaoResp.sender)
  return sender_.GetNoArena();
}
inline void HongbaoResp::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.HongbaoResp.sender)
}
inline void HongbaoResp::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.HongbaoResp.sender)
}
inline void HongbaoResp::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.HongbaoResp.sender)
}
inline void HongbaoResp::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.HongbaoResp.sender)
}
inline std::string* HongbaoResp::mutable_sender() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.HongbaoResp.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HongbaoResp::release_sender() {
  // @@protoc_insertion_point(field_release:IM.HongbaoResp.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HongbaoResp::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:IM.HongbaoResp.sender)
}

// optional bool isok = 3 [default = false];
inline bool HongbaoResp::has_isok() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HongbaoResp::clear_isok() {
  isok_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool HongbaoResp::isok() const {
  // @@protoc_insertion_point(field_get:IM.HongbaoResp.isok)
  return isok_;
}
inline void HongbaoResp::set_isok(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isok_ = value;
  // @@protoc_insertion_point(field_set:IM.HongbaoResp.isok)
}

// optional string description = 4;
inline bool HongbaoResp::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HongbaoResp::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HongbaoResp::description() const {
  // @@protoc_insertion_point(field_get:IM.HongbaoResp.description)
  return description_.GetNoArena();
}
inline void HongbaoResp::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.HongbaoResp.description)
}
inline void HongbaoResp::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.HongbaoResp.description)
}
inline void HongbaoResp::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.HongbaoResp.description)
}
inline void HongbaoResp::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.HongbaoResp.description)
}
inline std::string* HongbaoResp::mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:IM.HongbaoResp.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HongbaoResp::release_description() {
  // @@protoc_insertion_point(field_release:IM.HongbaoResp.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HongbaoResp::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:IM.HongbaoResp.description)
}

// -------------------------------------------------------------------

// ReqRobHongbao

// optional string hongbaokey = 1;
inline bool ReqRobHongbao::has_hongbaokey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRobHongbao::clear_hongbaokey() {
  hongbaokey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReqRobHongbao::hongbaokey() const {
  // @@protoc_insertion_point(field_get:IM.ReqRobHongbao.hongbaokey)
  return hongbaokey_.GetNoArena();
}
inline void ReqRobHongbao::set_hongbaokey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ReqRobHongbao.hongbaokey)
}
inline void ReqRobHongbao::set_hongbaokey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.ReqRobHongbao.hongbaokey)
}
inline void ReqRobHongbao::set_hongbaokey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ReqRobHongbao.hongbaokey)
}
inline void ReqRobHongbao::set_hongbaokey(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ReqRobHongbao.hongbaokey)
}
inline std::string* ReqRobHongbao::mutable_hongbaokey() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.ReqRobHongbao.hongbaokey)
  return hongbaokey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqRobHongbao::release_hongbaokey() {
  // @@protoc_insertion_point(field_release:IM.ReqRobHongbao.hongbaokey)
  if (!has_hongbaokey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hongbaokey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRobHongbao::set_allocated_hongbaokey(std::string* hongbaokey) {
  if (hongbaokey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hongbaokey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hongbaokey);
  // @@protoc_insertion_point(field_set_allocated:IM.ReqRobHongbao.hongbaokey)
}

// optional string sender = 2;
inline bool ReqRobHongbao::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRobHongbao::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReqRobHongbao::sender() const {
  // @@protoc_insertion_point(field_get:IM.ReqRobHongbao.sender)
  return sender_.GetNoArena();
}
inline void ReqRobHongbao::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ReqRobHongbao.sender)
}
inline void ReqRobHongbao::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.ReqRobHongbao.sender)
}
inline void ReqRobHongbao::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ReqRobHongbao.sender)
}
inline void ReqRobHongbao::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ReqRobHongbao.sender)
}
inline std::string* ReqRobHongbao::mutable_sender() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.ReqRobHongbao.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqRobHongbao::release_sender() {
  // @@protoc_insertion_point(field_release:IM.ReqRobHongbao.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRobHongbao::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:IM.ReqRobHongbao.sender)
}

// optional string selfname = 3;
inline bool ReqRobHongbao::has_selfname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqRobHongbao::clear_selfname() {
  selfname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ReqRobHongbao::selfname() const {
  // @@protoc_insertion_point(field_get:IM.ReqRobHongbao.selfname)
  return selfname_.GetNoArena();
}
inline void ReqRobHongbao::set_selfname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  selfname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ReqRobHongbao.selfname)
}
inline void ReqRobHongbao::set_selfname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  selfname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.ReqRobHongbao.selfname)
}
inline void ReqRobHongbao::set_selfname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  selfname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ReqRobHongbao.selfname)
}
inline void ReqRobHongbao::set_selfname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  selfname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ReqRobHongbao.selfname)
}
inline std::string* ReqRobHongbao::mutable_selfname() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:IM.ReqRobHongbao.selfname)
  return selfname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqRobHongbao::release_selfname() {
  // @@protoc_insertion_point(field_release:IM.ReqRobHongbao.selfname)
  if (!has_selfname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return selfname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRobHongbao::set_allocated_selfname(std::string* selfname) {
  if (selfname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  selfname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selfname);
  // @@protoc_insertion_point(field_set_allocated:IM.ReqRobHongbao.selfname)
}

// -------------------------------------------------------------------

// RespRobHongbao

// optional string hongbaokey = 1;
inline bool RespRobHongbao::has_hongbaokey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RespRobHongbao::clear_hongbaokey() {
  hongbaokey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RespRobHongbao::hongbaokey() const {
  // @@protoc_insertion_point(field_get:IM.RespRobHongbao.hongbaokey)
  return hongbaokey_.GetNoArena();
}
inline void RespRobHongbao::set_hongbaokey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.RespRobHongbao.hongbaokey)
}
inline void RespRobHongbao::set_hongbaokey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.RespRobHongbao.hongbaokey)
}
inline void RespRobHongbao::set_hongbaokey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.RespRobHongbao.hongbaokey)
}
inline void RespRobHongbao::set_hongbaokey(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hongbaokey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.RespRobHongbao.hongbaokey)
}
inline std::string* RespRobHongbao::mutable_hongbaokey() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.RespRobHongbao.hongbaokey)
  return hongbaokey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RespRobHongbao::release_hongbaokey() {
  // @@protoc_insertion_point(field_release:IM.RespRobHongbao.hongbaokey)
  if (!has_hongbaokey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hongbaokey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RespRobHongbao::set_allocated_hongbaokey(std::string* hongbaokey) {
  if (hongbaokey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hongbaokey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hongbaokey);
  // @@protoc_insertion_point(field_set_allocated:IM.RespRobHongbao.hongbaokey)
}

// optional string sender = 2;
inline bool RespRobHongbao::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RespRobHongbao::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RespRobHongbao::sender() const {
  // @@protoc_insertion_point(field_get:IM.RespRobHongbao.sender)
  return sender_.GetNoArena();
}
inline void RespRobHongbao::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.RespRobHongbao.sender)
}
inline void RespRobHongbao::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.RespRobHongbao.sender)
}
inline void RespRobHongbao::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.RespRobHongbao.sender)
}
inline void RespRobHongbao::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.RespRobHongbao.sender)
}
inline std::string* RespRobHongbao::mutable_sender() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.RespRobHongbao.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RespRobHongbao::release_sender() {
  // @@protoc_insertion_point(field_release:IM.RespRobHongbao.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RespRobHongbao::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:IM.RespRobHongbao.sender)
}

// optional double robmoney = 3;
inline bool RespRobHongbao::has_robmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RespRobHongbao::clear_robmoney() {
  robmoney_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RespRobHongbao::robmoney() const {
  // @@protoc_insertion_point(field_get:IM.RespRobHongbao.robmoney)
  return robmoney_;
}
inline void RespRobHongbao::set_robmoney(double value) {
  _has_bits_[0] |= 0x00000008u;
  robmoney_ = value;
  // @@protoc_insertion_point(field_set:IM.RespRobHongbao.robmoney)
}

// optional int64 totalcount = 4;
inline bool RespRobHongbao::has_totalcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RespRobHongbao::clear_totalcount() {
  totalcount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RespRobHongbao::totalcount() const {
  // @@protoc_insertion_point(field_get:IM.RespRobHongbao.totalcount)
  return totalcount_;
}
inline void RespRobHongbao::set_totalcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:IM.RespRobHongbao.totalcount)
}

// optional int64 leftcount = 5;
inline bool RespRobHongbao::has_leftcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RespRobHongbao::clear_leftcount() {
  leftcount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RespRobHongbao::leftcount() const {
  // @@protoc_insertion_point(field_get:IM.RespRobHongbao.leftcount)
  return leftcount_;
}
inline void RespRobHongbao::set_leftcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  leftcount_ = value;
  // @@protoc_insertion_point(field_set:IM.RespRobHongbao.leftcount)
}

// optional bool isok = 6;
inline bool RespRobHongbao::has_isok() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RespRobHongbao::clear_isok() {
  isok_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RespRobHongbao::isok() const {
  // @@protoc_insertion_point(field_get:IM.RespRobHongbao.isok)
  return isok_;
}
inline void RespRobHongbao::set_isok(bool value) {
  _has_bits_[0] |= 0x00000040u;
  isok_ = value;
  // @@protoc_insertion_point(field_set:IM.RespRobHongbao.isok)
}

// optional string description = 7;
inline bool RespRobHongbao::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RespRobHongbao::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RespRobHongbao::description() const {
  // @@protoc_insertion_point(field_get:IM.RespRobHongbao.description)
  return description_.GetNoArena();
}
inline void RespRobHongbao::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.RespRobHongbao.description)
}
inline void RespRobHongbao::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.RespRobHongbao.description)
}
inline void RespRobHongbao::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.RespRobHongbao.description)
}
inline void RespRobHongbao::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.RespRobHongbao.description)
}
inline std::string* RespRobHongbao::mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:IM.RespRobHongbao.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RespRobHongbao::release_description() {
  // @@protoc_insertion_point(field_release:IM.RespRobHongbao.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RespRobHongbao::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:IM.RespRobHongbao.description)
}

// -------------------------------------------------------------------

// GroupChat

// optional string groupid = 1;
inline bool GroupChat::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupChat::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupChat::groupid() const {
  // @@protoc_insertion_point(field_get:IM.GroupChat.groupid)
  return groupid_.GetNoArena();
}
inline void GroupChat::set_groupid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  groupid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.GroupChat.groupid)
}
inline void GroupChat::set_groupid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  groupid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.GroupChat.groupid)
}
inline void GroupChat::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  groupid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.GroupChat.groupid)
}
inline void GroupChat::set_groupid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  groupid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.GroupChat.groupid)
}
inline std::string* GroupChat::mutable_groupid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.GroupChat.groupid)
  return groupid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupChat::release_groupid() {
  // @@protoc_insertion_point(field_release:IM.GroupChat.groupid)
  if (!has_groupid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return groupid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChat::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  groupid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:IM.GroupChat.groupid)
}

// optional string sender = 2;
inline bool GroupChat::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupChat::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GroupChat::sender() const {
  // @@protoc_insertion_point(field_get:IM.GroupChat.sender)
  return sender_.GetNoArena();
}
inline void GroupChat::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.GroupChat.sender)
}
inline void GroupChat::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.GroupChat.sender)
}
inline void GroupChat::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.GroupChat.sender)
}
inline void GroupChat::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.GroupChat.sender)
}
inline std::string* GroupChat::mutable_sender() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.GroupChat.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupChat::release_sender() {
  // @@protoc_insertion_point(field_release:IM.GroupChat.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChat::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:IM.GroupChat.sender)
}

// optional string message = 3;
inline bool GroupChat::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupChat::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GroupChat::message() const {
  // @@protoc_insertion_point(field_get:IM.GroupChat.message)
  return message_.GetNoArena();
}
inline void GroupChat::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.GroupChat.message)
}
inline void GroupChat::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.GroupChat.message)
}
inline void GroupChat::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.GroupChat.message)
}
inline void GroupChat::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.GroupChat.message)
}
inline std::string* GroupChat::mutable_message() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:IM.GroupChat.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupChat::release_message() {
  // @@protoc_insertion_point(field_release:IM.GroupChat.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:IM.GroupChat.message)
}

// optional int64 timestamp = 4;
inline bool GroupChat::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupChat::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupChat::timestamp() const {
  // @@protoc_insertion_point(field_get:IM.GroupChat.timestamp)
  return timestamp_;
}
inline void GroupChat::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IM.GroupChat.timestamp)
}

// -------------------------------------------------------------------

// AddFriend

// optional string receiver = 1;
inline bool AddFriend::has_receiver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriend::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddFriend::receiver() const {
  // @@protoc_insertion_point(field_get:IM.AddFriend.receiver)
  return receiver_.GetNoArena();
}
inline void AddFriend::set_receiver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.AddFriend.receiver)
}
inline void AddFriend::set_receiver(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.AddFriend.receiver)
}
inline void AddFriend::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.AddFriend.receiver)
}
inline void AddFriend::set_receiver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.AddFriend.receiver)
}
inline std::string* AddFriend::mutable_receiver() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.AddFriend.receiver)
  return receiver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFriend::release_receiver() {
  // @@protoc_insertion_point(field_release:IM.AddFriend.receiver)
  if (!has_receiver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return receiver_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriend::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  receiver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:IM.AddFriend.receiver)
}

// optional string sender = 2;
inline bool AddFriend::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFriend::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AddFriend::sender() const {
  // @@protoc_insertion_point(field_get:IM.AddFriend.sender)
  return sender_.GetNoArena();
}
inline void AddFriend::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.AddFriend.sender)
}
inline void AddFriend::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.AddFriend.sender)
}
inline void AddFriend::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.AddFriend.sender)
}
inline void AddFriend::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.AddFriend.sender)
}
inline std::string* AddFriend::mutable_sender() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.AddFriend.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFriend::release_sender() {
  // @@protoc_insertion_point(field_release:IM.AddFriend.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriend::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:IM.AddFriend.sender)
}

// optional string message = 3;
inline bool AddFriend::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddFriend::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AddFriend::message() const {
  // @@protoc_insertion_point(field_get:IM.AddFriend.message)
  return message_.GetNoArena();
}
inline void AddFriend::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.AddFriend.message)
}
inline void AddFriend::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.AddFriend.message)
}
inline void AddFriend::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.AddFriend.message)
}
inline void AddFriend::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.AddFriend.message)
}
inline std::string* AddFriend::mutable_message() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:IM.AddFriend.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFriend::release_message() {
  // @@protoc_insertion_point(field_release:IM.AddFriend.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriend::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:IM.AddFriend.message)
}

// optional int64 timestamp = 4;
inline bool AddFriend::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddFriend::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddFriend::timestamp() const {
  // @@protoc_insertion_point(field_get:IM.AddFriend.timestamp)
  return timestamp_;
}
inline void AddFriend::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IM.AddFriend.timestamp)
}

// -------------------------------------------------------------------

// GetFriendInfo

// optional string sender = 1;
inline bool GetFriendInfo::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFriendInfo::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetFriendInfo::sender() const {
  // @@protoc_insertion_point(field_get:IM.GetFriendInfo.sender)
  return sender_.GetNoArena();
}
inline void GetFriendInfo::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.GetFriendInfo.sender)
}
inline void GetFriendInfo::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.GetFriendInfo.sender)
}
inline void GetFriendInfo::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.GetFriendInfo.sender)
}
inline void GetFriendInfo::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.GetFriendInfo.sender)
}
inline std::string* GetFriendInfo::mutable_sender() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.GetFriendInfo.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFriendInfo::release_sender() {
  // @@protoc_insertion_point(field_release:IM.GetFriendInfo.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendInfo::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:IM.GetFriendInfo.sender)
}

// optional string friend = 2;
inline bool GetFriendInfo::has_friend_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFriendInfo::clear_friend_() {
  friend__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetFriendInfo::friend_() const {
  // @@protoc_insertion_point(field_get:IM.GetFriendInfo.friend)
  return friend__.GetNoArena();
}
inline void GetFriendInfo::set_friend_(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  friend__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.GetFriendInfo.friend)
}
inline void GetFriendInfo::set_friend_(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  friend__.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.GetFriendInfo.friend)
}
inline void GetFriendInfo::set_friend_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  friend__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.GetFriendInfo.friend)
}
inline void GetFriendInfo::set_friend_(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  friend__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.GetFriendInfo.friend)
}
inline std::string* GetFriendInfo::mutable_friend_() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.GetFriendInfo.friend)
  return friend__.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFriendInfo::release_friend_() {
  // @@protoc_insertion_point(field_release:IM.GetFriendInfo.friend)
  if (!has_friend_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return friend__.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendInfo::set_allocated_friend_(std::string* friend_) {
  if (friend_ != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  friend__.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_);
  // @@protoc_insertion_point(field_set_allocated:IM.GetFriendInfo.friend)
}

// optional int64 timestamp = 3;
inline bool GetFriendInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetFriendInfo::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFriendInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:IM.GetFriendInfo.timestamp)
  return timestamp_;
}
inline void GetFriendInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IM.GetFriendInfo.timestamp)
}

// -------------------------------------------------------------------

// FriendInfo

// optional string mobile = 1;
inline bool FriendInfo::has_mobile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendInfo::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FriendInfo::mobile() const {
  // @@protoc_insertion_point(field_get:IM.FriendInfo.mobile)
  return mobile_.GetNoArena();
}
inline void FriendInfo::set_mobile(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.FriendInfo.mobile)
}
inline void FriendInfo::set_mobile(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mobile_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.FriendInfo.mobile)
}
inline void FriendInfo::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.FriendInfo.mobile)
}
inline void FriendInfo::set_mobile(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mobile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.FriendInfo.mobile)
}
inline std::string* FriendInfo::mutable_mobile() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.FriendInfo.mobile)
  return mobile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendInfo::release_mobile() {
  // @@protoc_insertion_point(field_release:IM.FriendInfo.mobile)
  if (!has_mobile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mobile_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_mobile(std::string* mobile) {
  if (mobile != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mobile_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:IM.FriendInfo.mobile)
}

// optional string nickname = 2;
inline bool FriendInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FriendInfo::nickname() const {
  // @@protoc_insertion_point(field_get:IM.FriendInfo.nickname)
  return nickname_.GetNoArena();
}
inline void FriendInfo::set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.FriendInfo.nickname)
}
inline void FriendInfo::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.FriendInfo.nickname)
}
inline void FriendInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.FriendInfo.nickname)
}
inline void FriendInfo::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.FriendInfo.nickname)
}
inline std::string* FriendInfo::mutable_nickname() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.FriendInfo.nickname)
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:IM.FriendInfo.nickname)
  if (!has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nickname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:IM.FriendInfo.nickname)
}

// optional string sex = 3;
inline bool FriendInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendInfo::clear_sex() {
  sex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FriendInfo::sex() const {
  // @@protoc_insertion_point(field_get:IM.FriendInfo.sex)
  return sex_.GetNoArena();
}
inline void FriendInfo::set_sex(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.FriendInfo.sex)
}
inline void FriendInfo::set_sex(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.FriendInfo.sex)
}
inline void FriendInfo::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.FriendInfo.sex)
}
inline void FriendInfo::set_sex(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.FriendInfo.sex)
}
inline std::string* FriendInfo::mutable_sex() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:IM.FriendInfo.sex)
  return sex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendInfo::release_sex() {
  // @@protoc_insertion_point(field_release:IM.FriendInfo.sex)
  if (!has_sex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sex_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:IM.FriendInfo.sex)
}

// optional int64 age = 4;
inline bool FriendInfo::has_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendInfo::clear_age() {
  age_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendInfo::age() const {
  // @@protoc_insertion_point(field_get:IM.FriendInfo.age)
  return age_;
}
inline void FriendInfo::set_age(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  age_ = value;
  // @@protoc_insertion_point(field_set:IM.FriendInfo.age)
}

// optional int64 timestamp = 5;
inline bool FriendInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendInfo::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:IM.FriendInfo.timestamp)
  return timestamp_;
}
inline void FriendInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IM.FriendInfo.timestamp)
}

// -------------------------------------------------------------------

// FriendList

// repeated .IM.FriendInfo friendlist = 1;
inline int FriendList::friendlist_size() const {
  return friendlist_.size();
}
inline void FriendList::clear_friendlist() {
  friendlist_.Clear();
}
inline ::IM::FriendInfo* FriendList::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:IM.FriendList.friendlist)
  return friendlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::FriendInfo >*
FriendList::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:IM.FriendList.friendlist)
  return &friendlist_;
}
inline const ::IM::FriendInfo& FriendList::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:IM.FriendList.friendlist)
  return friendlist_.Get(index);
}
inline ::IM::FriendInfo* FriendList::add_friendlist() {
  // @@protoc_insertion_point(field_add:IM.FriendList.friendlist)
  return friendlist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::FriendInfo >&
FriendList::friendlist() const {
  // @@protoc_insertion_point(field_list:IM.FriendList.friendlist)
  return friendlist_;
}

// optional int64 timestamp = 2;
inline bool FriendList::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendList::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendList::timestamp() const {
  // @@protoc_insertion_point(field_get:IM.FriendList.timestamp)
  return timestamp_;
}
inline void FriendList::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IM.FriendList.timestamp)
}

// -------------------------------------------------------------------

// Response

// optional bool result = 1;
inline bool Response::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Response::result() const {
  // @@protoc_insertion_point(field_get:IM.Response.result)
  return result_;
}
inline void Response::set_result(bool value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Response.result)
}

// optional string description = 2;
inline bool Response::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::description() const {
  // @@protoc_insertion_point(field_get:IM.Response.description)
  return description_.GetNoArena();
}
inline void Response::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Response.description)
}
inline void Response::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Response.description)
}
inline void Response::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Response.description)
}
inline void Response::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Response.description)
}
inline std::string* Response::mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.Response.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_description() {
  // @@protoc_insertion_point(field_release:IM.Response.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:IM.Response.description)
}

// -------------------------------------------------------------------

// Session

// optional bool islogin = 1;
inline bool Session::has_islogin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Session::clear_islogin() {
  islogin_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Session::islogin() const {
  // @@protoc_insertion_point(field_get:IM.Session.islogin)
  return islogin_;
}
inline void Session::set_islogin(bool value) {
  _has_bits_[0] |= 0x00000010u;
  islogin_ = value;
  // @@protoc_insertion_point(field_set:IM.Session.islogin)
}

// optional int64 hashkey = 2;
inline bool Session::has_hashkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Session::clear_hashkey() {
  hashkey_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Session::hashkey() const {
  // @@protoc_insertion_point(field_get:IM.Session.hashkey)
  return hashkey_;
}
inline void Session::set_hashkey(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  hashkey_ = value;
  // @@protoc_insertion_point(field_set:IM.Session.hashkey)
}

// optional string ip = 3;
inline bool Session::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Session::ip() const {
  // @@protoc_insertion_point(field_get:IM.Session.ip)
  return ip_.GetNoArena();
}
inline void Session::set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Session.ip)
}
inline void Session::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Session.ip)
}
inline void Session::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Session.ip)
}
inline void Session::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Session.ip)
}
inline std::string* Session::mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.Session.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Session::release_ip() {
  // @@protoc_insertion_point(field_release:IM.Session.ip)
  if (!has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:IM.Session.ip)
}

// optional string redisname = 4;
inline bool Session::has_redisname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Session::clear_redisname() {
  redisname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Session::redisname() const {
  // @@protoc_insertion_point(field_get:IM.Session.redisname)
  return redisname_.GetNoArena();
}
inline void Session::set_redisname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  redisname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Session.redisname)
}
inline void Session::set_redisname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  redisname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Session.redisname)
}
inline void Session::set_redisname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  redisname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Session.redisname)
}
inline void Session::set_redisname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  redisname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Session.redisname)
}
inline std::string* Session::mutable_redisname() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.Session.redisname)
  return redisname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Session::release_redisname() {
  // @@protoc_insertion_point(field_release:IM.Session.redisname)
  if (!has_redisname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return redisname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_redisname(std::string* redisname) {
  if (redisname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  redisname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redisname);
  // @@protoc_insertion_point(field_set_allocated:IM.Session.redisname)
}

// optional .IM.UserInfo userinfo = 5;
inline bool Session::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Session::clear_userinfo() {
  if (userinfo_ != nullptr) userinfo_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::IM::UserInfo& Session::userinfo() const {
  const ::IM::UserInfo* p = userinfo_;
  // @@protoc_insertion_point(field_get:IM.Session.userinfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::UserInfo*>(
      &::IM::_UserInfo_default_instance_);
}
inline ::IM::UserInfo* Session::release_userinfo() {
  // @@protoc_insertion_point(field_release:IM.Session.userinfo)
  _has_bits_[0] &= ~0x00000004u;
  ::IM::UserInfo* temp = userinfo_;
  userinfo_ = nullptr;
  return temp;
}
inline ::IM::UserInfo* Session::mutable_userinfo() {
  _has_bits_[0] |= 0x00000004u;
  if (userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::UserInfo>(GetArenaNoVirtual());
    userinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IM.Session.userinfo)
  return userinfo_;
}
inline void Session::set_allocated_userinfo(::IM::UserInfo* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:IM.Session.userinfo)
}

// -------------------------------------------------------------------

// UserInfo

// optional int64 id = 1;
inline bool UserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserInfo::id() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.id)
  return id_;
}
inline void UserInfo::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
  // @@protoc_insertion_point(field_set:IM.UserInfo.id)
}

// optional int32 sex = 2;
inline bool UserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo::clear_sex() {
  sex_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.sex)
  return sex_;
}
inline void UserInfo::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  sex_ = value;
  // @@protoc_insertion_point(field_set:IM.UserInfo.sex)
}

// optional int32 age = 3;
inline bool UserInfo::has_age() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::age() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.age)
  return age_;
}
inline void UserInfo::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  age_ = value;
  // @@protoc_insertion_point(field_set:IM.UserInfo.age)
}

// optional string name = 4;
inline bool UserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.name)
  return name_.GetNoArena();
}
inline void UserInfo::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.UserInfo.name)
}
inline void UserInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.UserInfo.name)
}
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.UserInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:IM.UserInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IM.UserInfo.name)
}

// optional string nick = 5;
inline bool UserInfo::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserInfo::nick() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.nick)
  return nick_.GetNoArena();
}
inline void UserInfo::set_nick(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.UserInfo.nick)
}
inline void UserInfo::set_nick(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.UserInfo.nick)
}
inline void UserInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.UserInfo.nick)
}
inline void UserInfo::set_nick(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.UserInfo.nick)
}
inline std::string* UserInfo::mutable_nick() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.UserInfo.nick)
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_nick() {
  // @@protoc_insertion_point(field_release:IM.UserInfo.nick)
  if (!has_nick()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nick_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:IM.UserInfo.nick)
}

// optional string phone = 6;
inline bool UserInfo::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UserInfo::phone() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.phone)
  return phone_.GetNoArena();
}
inline void UserInfo::set_phone(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.UserInfo.phone)
}
inline void UserInfo::set_phone(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  phone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.UserInfo.phone)
}
inline void UserInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.UserInfo.phone)
}
inline void UserInfo::set_phone(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.UserInfo.phone)
}
inline std::string* UserInfo::mutable_phone() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:IM.UserInfo.phone)
  return phone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_phone() {
  // @@protoc_insertion_point(field_release:IM.UserInfo.phone)
  if (!has_phone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return phone_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  phone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:IM.UserInfo.phone)
}

// optional string email = 7;
inline bool UserInfo::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.email)
  return email_.GetNoArena();
}
inline void UserInfo::set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.UserInfo.email)
}
inline void UserInfo::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.UserInfo.email)
}
inline void UserInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.UserInfo.email)
}
inline void UserInfo::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.UserInfo.email)
}
inline std::string* UserInfo::mutable_email() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:IM.UserInfo.email)
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:IM.UserInfo.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:IM.UserInfo.email)
}

// optional int64 createtime = 8;
inline bool UserInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfo::clear_createtime() {
  createtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserInfo::createtime() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.createtime)
  return createtime_;
}
inline void UserInfo::set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  createtime_ = value;
  // @@protoc_insertion_point(field_set:IM.UserInfo.createtime)
}

// optional int64 updatetime = 9;
inline bool UserInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfo::clear_updatetime() {
  updatetime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.updatetime)
  return updatetime_;
}
inline void UserInfo::set_updatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:IM.UserInfo.updatetime)
}

// optional string sign_info = 10;
inline bool UserInfo::has_sign_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::clear_sign_info() {
  sign_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& UserInfo::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.sign_info)
  return sign_info_.GetNoArena();
}
inline void UserInfo::set_sign_info(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  sign_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.UserInfo.sign_info)
}
inline void UserInfo::set_sign_info(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  sign_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.UserInfo.sign_info)
}
inline void UserInfo::set_sign_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  sign_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.UserInfo.sign_info)
}
inline void UserInfo::set_sign_info(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  sign_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.UserInfo.sign_info)
}
inline std::string* UserInfo::mutable_sign_info() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:IM.UserInfo.sign_info)
  return sign_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.UserInfo.sign_info)
  if (!has_sign_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return sign_info_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_sign_info(std::string* sign_info) {
  if (sign_info != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sign_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign_info);
  // @@protoc_insertion_point(field_set_allocated:IM.UserInfo.sign_info)
}

// optional double money = 11;
inline bool UserInfo::has_money() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserInfo::clear_money() {
  money_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double UserInfo::money() const {
  // @@protoc_insertion_point(field_get:IM.UserInfo.money)
  return money_;
}
inline void UserInfo::set_money(double value) {
  _has_bits_[0] |= 0x00000400u;
  money_ = value;
  // @@protoc_insertion_point(field_set:IM.UserInfo.money)
}

// -------------------------------------------------------------------

// SendHongbao

// optional string sender = 1;
inline bool SendHongbao::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendHongbao::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SendHongbao::sender() const {
  // @@protoc_insertion_point(field_get:IM.SendHongbao.sender)
  return sender_.GetNoArena();
}
inline void SendHongbao::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.SendHongbao.sender)
}
inline void SendHongbao::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.SendHongbao.sender)
}
inline void SendHongbao::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.SendHongbao.sender)
}
inline void SendHongbao::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.SendHongbao.sender)
}
inline std::string* SendHongbao::mutable_sender() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.SendHongbao.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendHongbao::release_sender() {
  // @@protoc_insertion_point(field_release:IM.SendHongbao.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendHongbao::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:IM.SendHongbao.sender)
}

// optional double money = 2;
inline bool SendHongbao::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendHongbao::clear_money() {
  money_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SendHongbao::money() const {
  // @@protoc_insertion_point(field_get:IM.SendHongbao.money)
  return money_;
}
inline void SendHongbao::set_money(double value) {
  _has_bits_[0] |= 0x00000004u;
  money_ = value;
  // @@protoc_insertion_point(field_set:IM.SendHongbao.money)
}

// optional double leftmoney = 3;
inline bool SendHongbao::has_leftmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendHongbao::clear_leftmoney() {
  leftmoney_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SendHongbao::leftmoney() const {
  // @@protoc_insertion_point(field_get:IM.SendHongbao.leftmoney)
  return leftmoney_;
}
inline void SendHongbao::set_leftmoney(double value) {
  _has_bits_[0] |= 0x00000008u;
  leftmoney_ = value;
  // @@protoc_insertion_point(field_set:IM.SendHongbao.leftmoney)
}

// optional int64 category = 4;
inline bool SendHongbao::has_category() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendHongbao::clear_category() {
  category_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendHongbao::category() const {
  // @@protoc_insertion_point(field_get:IM.SendHongbao.category)
  return category_;
}
inline void SendHongbao::set_category(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  category_ = value;
  // @@protoc_insertion_point(field_set:IM.SendHongbao.category)
}

// optional int64 count = 5;
inline bool SendHongbao::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendHongbao::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendHongbao::count() const {
  // @@protoc_insertion_point(field_get:IM.SendHongbao.count)
  return count_;
}
inline void SendHongbao::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  count_ = value;
  // @@protoc_insertion_point(field_set:IM.SendHongbao.count)
}

// optional int64 leftcount = 6;
inline bool SendHongbao::has_leftcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SendHongbao::clear_leftcount() {
  leftcount_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendHongbao::leftcount() const {
  // @@protoc_insertion_point(field_get:IM.SendHongbao.leftcount)
  return leftcount_;
}
inline void SendHongbao::set_leftcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  leftcount_ = value;
  // @@protoc_insertion_point(field_set:IM.SendHongbao.leftcount)
}

// optional string receiver = 7;
inline bool SendHongbao::has_receiver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendHongbao::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SendHongbao::receiver() const {
  // @@protoc_insertion_point(field_get:IM.SendHongbao.receiver)
  return receiver_.GetNoArena();
}
inline void SendHongbao::set_receiver(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.SendHongbao.receiver)
}
inline void SendHongbao::set_receiver(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.SendHongbao.receiver)
}
inline void SendHongbao::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.SendHongbao.receiver)
}
inline void SendHongbao::set_receiver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.SendHongbao.receiver)
}
inline std::string* SendHongbao::mutable_receiver() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:IM.SendHongbao.receiver)
  return receiver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendHongbao::release_receiver() {
  // @@protoc_insertion_point(field_release:IM.SendHongbao.receiver)
  if (!has_receiver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return receiver_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendHongbao::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  receiver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:IM.SendHongbao.receiver)
}

// repeated .IM.RobLog robitem = 8;
inline int SendHongbao::robitem_size() const {
  return robitem_.size();
}
inline void SendHongbao::clear_robitem() {
  robitem_.Clear();
}
inline ::IM::RobLog* SendHongbao::mutable_robitem(int index) {
  // @@protoc_insertion_point(field_mutable:IM.SendHongbao.robitem)
  return robitem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::RobLog >*
SendHongbao::mutable_robitem() {
  // @@protoc_insertion_point(field_mutable_list:IM.SendHongbao.robitem)
  return &robitem_;
}
inline const ::IM::RobLog& SendHongbao::robitem(int index) const {
  // @@protoc_insertion_point(field_get:IM.SendHongbao.robitem)
  return robitem_.Get(index);
}
inline ::IM::RobLog* SendHongbao::add_robitem() {
  // @@protoc_insertion_point(field_add:IM.SendHongbao.robitem)
  return robitem_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::RobLog >&
SendHongbao::robitem() const {
  // @@protoc_insertion_point(field_list:IM.SendHongbao.robitem)
  return robitem_;
}

// optional int64 timestamp = 9;
inline bool SendHongbao::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SendHongbao::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendHongbao::timestamp() const {
  // @@protoc_insertion_point(field_get:IM.SendHongbao.timestamp)
  return timestamp_;
}
inline void SendHongbao::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IM.SendHongbao.timestamp)
}

// -------------------------------------------------------------------

// RobLog

// optional string name = 1;
inline bool RobLog::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobLog::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RobLog::name() const {
  // @@protoc_insertion_point(field_get:IM.RobLog.name)
  return name_.GetNoArena();
}
inline void RobLog::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.RobLog.name)
}
inline void RobLog::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.RobLog.name)
}
inline void RobLog::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.RobLog.name)
}
inline void RobLog::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.RobLog.name)
}
inline std::string* RobLog::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:IM.RobLog.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RobLog::release_name() {
  // @@protoc_insertion_point(field_release:IM.RobLog.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RobLog::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IM.RobLog.name)
}

// optional double money = 2;
inline bool RobLog::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobLog::clear_money() {
  money_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RobLog::money() const {
  // @@protoc_insertion_point(field_get:IM.RobLog.money)
  return money_;
}
inline void RobLog::set_money(double value) {
  _has_bits_[0] |= 0x00000002u;
  money_ = value;
  // @@protoc_insertion_point(field_set:IM.RobLog.money)
}

// optional int64 time = 3;
inline bool RobLog::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobLog::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RobLog::time() const {
  // @@protoc_insertion_point(field_get:IM.RobLog.time)
  return time_;
}
inline void RobLog::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
  // @@protoc_insertion_point(field_set:IM.RobLog.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eproto
